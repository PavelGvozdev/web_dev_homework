"""
Домашнее задание модуля В5.9. Автор: Павел Гвоздев
Программа реализует класс-секундомер, объект которого принимает в качестве параметра
количество запусков функции (не больше 20) и измеряет среднее время работы функции f().
Пользователю предлагается ввести количество запусков функции (не больше 20). Программа создает
объект класса Timer, вычисляющий среднее время выполнения функции.
"""
#импортируем модуль, необходимый для работы со значениями времени
import time

class Timer:
    """
    Объект класса Timer принимает в качестве параметра количество запусков функции (не больше 20),
    измеряет среднее время работы функции f() и выводит его
    """
 
    #функция инициализирующая объект класса
    def __init__(self, func):
        self.func = func
        
    #функция "делающая" объект "вызываемым" и позволяющая использовать его в качестве декоратора
    def __call__(self, iter_count):
        #переменная содержит суммарное время выполнения функци
        avg_time = 0
        #в цикле для каждой итерации выполнени функции вычисляется время выполнения
        for _ in range(iter_count):
            t0 = time.time()
            self.func(iter_count)
            t1 = time.time()
            avg_time += (t1 - t0)
        #переменная содержит среднее время выполнения функци
        avg_time /= iter_count
        print('Среднее время выполнения функции {0} секунд'.format(avg_time))

@Timer
def f(iter_count):
    """
    Эта функция ничего не делает.
    Используется в качестве тестируемой функции, чье среднее время работы измеряется.
    """
    for j in range(1000000):
        pass

def main():
    """
    Осуществляет взаимодействие с пользователем, обрабатывает пользовательский ввод. 
    """
    iter_count = int(input("Введите количество итераций выполнения функции (положителное число не больше 20): "))
    # проверяем валидность ввода
    if 1 <= iter_count <= 20:
        iter_count = iter_count
        f(iter_count)
    else:
        print('Ошибка. Число должно быть положителным целым, не больше 20.')

if __name__ == "__main__":
    main()